/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        jkEsc {
            bindings = <&gresc>;
            key-positions = <31 32>;
        };

        atlBcksp {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <30 31 32>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <31 32 33>;
        };

        lBracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <17 16>;
        };

        rBracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <18 19>;
        };

        lPar {
            bindings = <&kp LPAR>;
            key-positions = <28 29>;
        };

        rPar {
            bindings = <&kp RPAR>;
            key-positions = <30 31>;
        };

        lBrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <40 41>;
        };

        rBrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <44 45>;
        };
    };

    macros {
    };

    behaviors {
        moAndKP: moAndKP {
            compatible = "zmk,behavior-hold-tap";
            label = "MOANDKP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
        };

        kpAndCaps: kpAndCaps {
            compatible = "zmk,behavior-hold-tap";
            label = "KPANDCAPS";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
        };

        holdOrTapKP: holdOrTapKP {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDORTAPKP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
        };

        kpAndLongHold: kpAndLongHold {
            compatible = "zmk,behavior-hold-tap";
            label = "KPANDLONGHOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <800>;
            flavor = "tap-preferred";
        };

        tapTapHold: tapTapHold {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPTAPHOLD";
            #binding-cells = <0>;
            bindings = <&kp LC(SPACE)>, <&holdOrTapKP LCTRL LS(LG(SPACE))>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp ESC             &kp N1  &kp N2  &kp N3    &kp N4                             &kp N5                                               &kp N6                &kp N7    &kp N8     &kp N9   &kp N0    &kp GRAVE
&kp TAB             &kp Q   &kp W   &kp E     &kpAndLongHold LS(LG(NUMBER_4)) R  &kp T                                                &kp Y                 &kp U     &kp I      &kp O    &kp P     &kp BACKSPACE
&tapTapHold         &kp A   &kp S   &kp D     &kp F                              &kp G                                                &kp H                 &kp J     &kp K      &kp L    &kp SEMI  &kp SQT
&kpAndCaps LSHFT 0  &kp Z   &kp X   &kp C     &kp V                              &kp B                         &kp LBKT     &kp RBKT  &kp N                 &kp M     &kp COMMA  &kp DOT  &kp FSLH  &kp ESCAPE
                                    &kp LALT  &kp LGUI                           &moAndKP 1 LS(LA(LC(LG(T))))  &kp SPACE    &kp RET   &moAndKP 2 LG(SPACE)  &kp RALT  &kp RGUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2           &bt BT_SEL 3           &bt BT_SEL 4                                            &trans          &trans          &trans        &trans     &trans  &trans
&trans      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3           &kp NUMBER_4           &kp N5                                                  &kp NUMBER_6    &kp N7          &kp N8        &kp N9     &kp N0  &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2           &bt BT_SEL 3           &out OUT_TOG                                            &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &trans  &trans
&kp LSHIFT  &trans        &trans        &kp LA(LC(LG(LS(A))))  &kp LS(LA(LC(LG(B))))  &kp LS(LC(LG(LA(C))))  &trans                   &trans  &trans          &trans          &trans        &trans     &trans  &trans
                                        &trans                 &kp LS(LA(LC(LG(T))))  &trans                 &kp LS(LA(LC(LG(E))))    &trans  &trans          &trans          &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&trans  &trans           &trans       &trans          &trans             &trans                             &trans     &trans         &trans            &trans                &trans                 &trans
&trans  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH        &kp DOLLAR         &kp PERCENT                        &kp LCTRL  &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &trans           &trans       &kp C_MUTE      &kp C_VOLUME_DOWN  &kp C_VOLUME_UP                    &kp MINUS  &kp EQUAL      &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp BACKSLASH          &kp GRAVE
&trans  &trans           &trans       &kp C_PREVIOUS  &kp C_PP           &kp C_NEXT       &trans    &trans  &kp UNDER  &kp PLUS       &kp LEFT_BRACE    &kp RIGHT_BRACE       &kp PIPE               &kp TILDE
                                      &trans          &trans             &trans           &trans    &trans  &trans     &trans         &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
    };
};
